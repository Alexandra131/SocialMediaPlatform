/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.io.FileWriter;
import java.io.IOException;

public class App {
    public static String comanda = null;
    public App() {/* compiled code */}

    public static void main(java.lang.String[] strings) {
      if (strings == null){
          System.out.print("Hello world!");
          return;
      }
      comanda = strings[0];
      if (comanda.equals("-create-user")){
          Utilizator utilizator = new Utilizator();
          utilizator.creareUtilizator(strings);
      }

      if (comanda.equals("-create-post")) {
          Postare postare = new Postare();
          postare.adaugaPostare(strings);
      }



      if(comanda.equals("-cleanup-all")) {
          try (FileWriter writer = new FileWriter("Utilizator.txt", false)) {
              writer.write("");
          } catch (IOException e) {
              throw new RuntimeException(e);
          }
          try (FileWriter writer = new FileWriter("Postare.txt", false)) {
              writer.write("");
          } catch (IOException e) {
              throw new RuntimeException(e);
          }
          try (FileWriter writer = new FileWriter("Urmariri.txt", false)) {
              writer.write("");
          } catch (IOException e) {
              throw new RuntimeException(e);
          }
          try (FileWriter writer = new FileWriter("Like.txt", false)) {
              writer.write("");
          } catch (IOException e) {
              throw new RuntimeException(e);
          }
          try (FileWriter writer = new FileWriter("Comentariu.txt", false)) {
              writer.write("");
          } catch (IOException e) {
              throw new RuntimeException(e);
          }
          try (FileWriter writer = new FileWriter("Like_comentariu.txt", false)) {
              writer.write("");
          } catch (IOException e) {
              throw new RuntimeException(e);
          }
          try (FileWriter writer = new FileWriter("nrUrmaririPerUtilizator.txt", false)) {
              writer.write("");
          } catch (IOException e) {
              throw new RuntimeException(e);
          }
      }

      if(comanda.equals("-delete-post-by-id")) {
          Postare postare1 = new Postare();
          postare1.stergePostare(strings);
     }
      if(comanda.equals("-follow-user-by-username")) {

          Utilizator utilizator1 = new Utilizator();
          utilizator1.urmarireUtilizator(strings);
      }
      if(comanda.equals("-unfollow-user-by-username")) {
          Utilizator utilizator = new Utilizator();
          utilizator.unfollowUtilizator(strings);
      }
      if(comanda.equals("-like-post")) {
          Postare postare =  new Postare();
          postare.Like(strings);
      }
      if(comanda.equals("-unlike-post")) {
          Postare postare =  new Postare();
          postare.unLike(strings);
      }
      if(comanda.equals("-comment-post")) {
          Comentariu comentariu = new Comentariu();
          comentariu.adaugaCom(strings);

      }
      if(comanda.equals("-delete-comment-by-id")) {
          Comentariu comentariu = new Comentariu();
          comentariu.stergeCom(strings);
      }
      if(comanda.equals("-like-comment")) {
          Comentariu comentariu = new Comentariu();
          comentariu.likeComm(strings);
      }

      if(comanda.equals("-unlike-comment")) {
          Comentariu comentariu = new Comentariu();
          comentariu.stargeLikeComm(strings);
      }

      if(comanda.equals("-get-following")) {
          Utilizator utilizator = new Utilizator();
          utilizator.getFollowing(strings);
      }

      if(comanda.equals("-get-followers")) {
          Utilizator utilizator = new Utilizator();
          utilizator.getFollowers(strings);
      }
      if (comanda.equals("-get-most-liked-posts")) {
          Postare postare = new Postare();
          postare.getMostLikePost(strings);
      }
      if(comanda.equals("-get-most-commented-posts")) {
          Comentariu comentariu = new Comentariu();
          comentariu.getMostComm(strings);
      }
      if(comanda.equals("-get-most-followed-users")) {
          Utilizator utilizator = new Utilizator();
          utilizator.getMostFollow(strings);
      }
      if (comanda.equals("-get-most-liked-users")) {
          Utilizator utilizator = new Utilizator();
          utilizator.getMostLike(strings);
      }
      if (comanda.equals("-get-followings-posts")) {
          Postare postare = new Postare();
          postare.getFollowingsPosts(strings);
      }

      if(comanda.equals("-get-user-posts")) {
          Postare postare = new Postare();
          postare.getUserPost(strings);
      }

      if(comanda.equals("-get-post-details")) {
          Postare postare = new Postare();
          postare.getPostDetails(strings);
      }

    }
}









